{"version":3,"file":"/js/yptSearch.js","mappings":"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","sources":["webpack://good-guitarist/./assets/src/scripts/yptSearch.js","webpack://good-guitarist/external window \"jQuery\"","webpack://good-guitarist/webpack/bootstrap"],"sourcesContent":["const { chunk } = lodash;\n\n/**\n * Add search action and verify the form checkboxes. Return their data.\n *\n * @param {HTMLElement} form HTML search form.\n * @param {Array|null} songFilterCheckboxes HTML checkboxes to get search data from.\n * @returns {FormData}\n */\nconst verifyAndReturnSearchFormData = ( form, songFilterCheckboxes ) => {\n\tconst formData = {\n\t\taction: \"ypt_ajax_filter_search\",\n\t\tsongSearchText: (0 !== form.find(\"#songSearchText\").val().length) ? form.find(\"#songSearchText\").val() : null,\n\t};\n\n\tif (songFilterCheckboxes) {\n\t\tsongFilterCheckboxes.forEach((val) => {\n\t\t\tformData[val] = getCheckedSongFilters(val);\n\t\t});\n\t}\n\n\treturn formData;\n}\n\n/**\n * Find all the checked song filters and return the selections.\n *\n * @param {string} inputName The name of the checkbox fieldset to get data from.\n * @returns {array}\n */\nconst getCheckedSongFilters = ( inputName ) => {\n\tlet value = [];\n\tconst inputs = document.querySelectorAll(`#ypt-ajax-filter-search input[name=\"${inputName}\"]:checked`);\n\tArray.prototype.forEach.call(inputs, (element) => {\n\t\tif ('radio' === element.type) {\n\t\t\tvalue = element.value;\n\t\t} else if ('checkbox' === element.type && \"contains-one-barre-chord\" !== element.id) {\n\t\t\tvalue.push(element.value);\n\t\t} else if (\"contains-one-barre-chord\" === element.id) {\n\t\t\tvalue = element.checked;\n\t\t}\n\t});\n\treturn value;\n}\n\n/**\n * Send the AJAX request to the server. Check if the search results element\n * can be found before making the request.\n *\n * @param {HTMLElement} yptSearchResultsElement\n * @param {Object} searchFormData\n * @returns {void}\n */\nconst sendAjaxRequest = ( yptSearchResultsElement, searchFormData ) => {\n\tconst yptSearchResultsCountElement = $('.search-results-count .count');\n\tif (yptSearchResultsElement) {\n\t\t$.ajax({\n\t\t\t// Global variable YPTSEARCHAJAX created by wp_inline_script().\n\t\t\turl : YPTSEARCHAJAX.ajax_url,\n\t\t\tdata : searchFormData,\n\t\t\tsuccess : (response) => {\n\t\t\t\typtSearchResultsElement.empty();\n\t\t\t\typtSearchResultsCountElement.each(function() {\n\t\t\t\t\t$(this).text(response.data.length);\n\t\t\t\t});\n\t\t\t\tpaginateSearchResults(response.data, yptSearchResultsElement);\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * Add HTML for each search result returned.\n * \n * @param {*} results All search results.\n * @param {*} yptSearchResultsElement HTML element to append results to.\n * @return {void}\n */\nconst populateSearchResults = (results, yptSearchResultsElement) => {\n\tresults.forEach((post) => {\n\t\tconst videoThumbnail = post.content.length > 0 ? post.content[0]?.attrs?.videoThumbnail : '';\n\t\tlet html = \"<li class='ypt-result' id='ypt-\" + post.id + \"'>\";\n\t\thtml += \"  <a href='\" + post.permalink + \"' title='\" + post.title + \"'>\";\n\t\thtml += \"\t   <img src='\" + videoThumbnail + \"' />\";\n\t\thtml += \"      <div class='ypt-info'>\";\n\t\thtml += \"          <h3>\" + post.title + \"</h3>\";\n\t\thtml += \"      </div>\";\n\t\thtml += \"  </a>\";\n\t\thtml += \"</li>\";\n\n\t\typtSearchResultsElement.append(html);\n\t});\n}\n\n/**\n * Break up search results into pages to allow the user to scroll through them chunk by chunk.\n * \n * @param {array} results Search results to break into sections(paginate).\n * @param {*} yptSearchResultsElement The HTML element where the search results populate into.\n * @param {*} yptSearchResultsCountElement The HTML element that displays the number of search results.\n * @return {void}\n */\nconst paginateSearchResults = (results, yptSearchResultsElement, yptSearchResultsCountElement) => {\n\tconst resultsPerPage = 6;\n\tconst yptSearchPreviousPageButton = $('.search-results-controls .previous-page');\n\tconst yptSearchNextPageButton = $('.search-results-controls .next-page');\n\tconst yptSearchResultsPageCountElement = $('.search-results-page-count');\n\typtSearchPreviousPageButton.prop(\"disabled\", false).css(\"cursor\", \"pointer\");\n\typtSearchNextPageButton.prop(\"disabled\", false).css(\"cursor\", \"pointer\");\n\typtSearchResultsPageCountElement.find('.current-page').text('1');\n\typtSearchResultsPageCountElement.find('.last-page').text('1');\n\typtSearchResultsElement.empty();\n\t\n\tif (results.length > resultsPerPage) {\n\t\tconst chunkedResults = chunk(results, resultsPerPage);\n\t\typtSearchResultsPageCountElement.find('.current-page').text('1');\n\t\typtSearchResultsPageCountElement.find('.last-page').text(chunkedResults.length);\n\t\tpopulateSearchResults(chunkedResults[0], yptSearchResultsElement, yptSearchResultsCountElement);\n\t\typtSearchPreviousPageButton.off('click');\n\t\typtSearchNextPageButton.off('click');\n\n\t\t// Event listeners for previous and next page buttons.\n\t\typtSearchPreviousPageButton.on('click', (e) => {\n\t\t\tconst newPageCount = updatePageCount(e.target, false, chunkedResults.length, yptSearchResultsPageCountElement);\n\t\t\typtSearchResultsElement.empty();\n\t\t\tpopulateSearchResults(chunkedResults[newPageCount], yptSearchResultsElement, yptSearchResultsCountElement);\n\t\t});\n\t\typtSearchNextPageButton.on('click', (e) => {\n\t\t\tconst newPageCount = updatePageCount(e.target, true, chunkedResults.length, yptSearchResultsPageCountElement);\n\t\t\typtSearchResultsElement.empty();\n\t\t\tpopulateSearchResults(chunkedResults[newPageCount], yptSearchResultsElement, yptSearchResultsCountElement);\n\t\t});\n\t} else {\n\t\tpopulateSearchResults(results, yptSearchResultsElement, yptSearchResultsCountElement);\n\t\typtSearchPreviousPageButton.prop(\"disabled\", true).css(\"cursor\", \"not-allowed\");\n\t\typtSearchNextPageButton.prop(\"disabled\", true).css(\"cursor\", \"not-allowed\");\n\t\typtSearchResultsPageCountElement.find('.current-page').text('1');\n\t\typtSearchResultsPageCountElement.find('.last-page').text('1');\n\t}\n\n}\n\n/**\n * Handler for updating the page count of search results.\n * \n * @param {*} changePageButton \n * @param {*} increasePage\n * @param {*} pageCount\n * @param {*} yptSearchResultsPageCountElement\n * @return {string}\n */\nconst updatePageCount = (changePageButton, increasePage, pageCount, yptSearchResultsPageCountElement) => {\n\tconst $pageCountElement = $('.search-results-page-count .current-page').first();\n\t// const $pageCountElement = $(changePageButton).parent().first().find('.search-results-page-count .current-page').first();\n\tlet currentPage = Number($pageCountElement.data('page'));\n\tlet humanCurrentPage = currentPage + 1;\n\n\tif (increasePage) {\n\t\tif (currentPage < pageCount - 1) {\n\t\t\typtSearchResultsPageCountElement.find('.current-page').text(humanCurrentPage + 1);\n\t\t\t$pageCountElement.data('page', currentPage + 1);\n\t\t}\n\t} else if (currentPage > 0) {\n\t\typtSearchResultsPageCountElement.find('.current-page').text(humanCurrentPage - 1);\n\t\t$pageCountElement.data('page', currentPage - 1);\n\t}\n\n\treturn $pageCountElement.data('page');\n}\n\n\n/**\n * Set aria-expanded attributes for mobile devices(less than 901px wide).\n *\n * @param {HTMLElement} buttonElement\n */\nconst setSearchFiltersAriaExpandedIfMobile = (buttonElement) => {\n\tif ( window.innerWidth < 901) {\n\t\tbuttonElement.setAttribute('aria-expanded', \"false\");\n\t} else {\n\t\tbuttonElement.setAttribute('aria-expanded', \"true\");\n\t}\n}\n\n/**\n * Allow search filters to collapse and expand on mobile(less than 901px wide).\n */\nconst searchFiltersMobile = () => {\n\tconst searchFiltersButtonElement = document.querySelector('.filters-expand-button');\n\tconst searchFiltersButtonArrowElement = searchFiltersButtonElement.querySelector('span');\n\tconst searchFiltersElement = document.querySelector('.search-filters-section');\n\n\twindow.addEventListener(\"resize\", () => {\n\t\tsetSearchFiltersAriaExpandedIfMobile(searchFiltersButtonElement);\n\t\tif ( window.innerWidth < 901) {\n\t\t\tsearchFiltersElement.style.height = \"0px\";\n\t\t} else {\n\t\t\tsearchFiltersElement.style.height = \"450px\";\n\t\t}\n\t});\n\n\tsetSearchFiltersAriaExpandedIfMobile(searchFiltersButtonElement);\n\tsearchFiltersButtonElement.addEventListener(\"click\", (e) => {\n\t\te.preventDefault();\n\t\tif (\"true\" === searchFiltersButtonElement.getAttribute(\"aria-expanded\")) {\n\t\t\tsearchFiltersElement.style.height = \"0px\";\n\t\t\tsearchFiltersButtonElement.setAttribute('aria-expanded', \"false\");\n\t\t\tsearchFiltersButtonArrowElement.style.transform = \"rotate(0deg)\";\n\t\t} else if (\"false\" === searchFiltersButtonElement.getAttribute(\"aria-expanded\")) {\n\t\t\tsearchFiltersElement.style.height = \"100%\";\n\t\t\tsearchFiltersButtonElement.setAttribute('aria-expanded', \"true\");\n\t\t\tsearchFiltersButtonArrowElement.style.transform = \"rotate(180deg)\";\n\t\t}\n\t});\n}\n\n/**\n * IIFE.\n *\n *\n */\n(($) => {\n\tconst songFilterCheckboxes = [\n\t\t'songDecade',\n\t\t'songChords',\n\t\t'songChordsFilterType',\n\t\t'songGenre',\n\t\t'songFeel',\n\t\t'songBeginner',\n\t\t'songDifficulty',\n\t\t'songContainsOneBarre'\n\t];\n\tconst yptSearchBlock = $(\"#ypt-ajax-filter-search\");\n\tconst yptSearchFiltersForm = yptSearchBlock.find(\"form\");\n\tconst yptSearchResultsElement = yptSearchBlock.find(\"#ypt-ajax-search-results\");\n\n\typtSearchFiltersForm.trigger('reset');\n\typtSearchFiltersForm.on('submit',(e) => {\n\t\tconst searchFormData = verifyAndReturnSearchFormData(yptSearchFiltersForm, songFilterCheckboxes);\n\t\te.preventDefault();\n\t\tsendAjaxRequest(yptSearchResultsElement, searchFormData);\n\t});\n\n\tsearchFiltersMobile();\n\n\t// Run request on page load for initial results.\n\tconst searchFormData = verifyAndReturnSearchFormData(yptSearchFiltersForm, null);\n\tsendAjaxRequest(yptSearchResultsElement, searchFormData);\n\n})(jQuery);\n\n\n\n\n","module.exports = window[\"jQuery\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["chunk","verifyAndReturnSearchFormData","getCheckedSongFilters","sendAjaxRequest","populateSearchResults","paginateSearchResults","updatePageCount","setSearchFiltersAriaExpandedIfMobile","module","exports","window","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","lodash","form","songFilterCheckboxes","formData","action","songSearchText","find","val","length","forEach","inputName","value","inputs","document","querySelectorAll","Array","prototype","call","element","type","id","push","checked","yptSearchResultsElement","searchFormData","yptSearchResultsCountElement","$","ajax","url","YPTSEARCHAJAX","ajax_url","data","success","response","empty","each","this","text","results","post","videoThumbnail","content","_post$content$","attrs","_post$content$$attrs","html","permalink","title","append","yptSearchPreviousPageButton","yptSearchNextPageButton","yptSearchResultsPageCountElement","prop","css","chunkedResults","off","on","e","newPageCount","target","changePageButton","increasePage","pageCount","$pageCountElement","first","currentPage","Number","humanCurrentPage","buttonElement","innerWidth","setAttribute","searchFiltersButtonElement","searchFiltersButtonArrowElement","searchFiltersElement","yptSearchBlock","yptSearchFiltersForm","trigger","preventDefault","querySelector","addEventListener","style","height","getAttribute","transform","jQuery"],"sourceRoot":""}